import os
import cv2
import torch
from PIL import Image
import imageio.v3 as iio
import torchvision.transforms.functional as TF

from accelerate.utils import set_seed
from train_dreambooth_lora import config_parser
from diffusers import DiffusionPipeline, DPMSolverMultistepScheduler, DDPMScheduler


# helper functions
def center_crop_and_resize(img, res):
    h, w, _ = img.shape

    # center crop
    side = min(h, w)
    if h == w:
        center_crop = img
    elif h > w:
        start = (h-side)//2
        center_crop = img[start:start+side]
    else:
        start = (w-side)//2
        center_crop = img[:, start:start+side]

    # resize image
    if side == res:
        return center_crop

    interpolation = cv2.INTER_AREA if side > res else cv2.INTER_LINEAR
    resized = cv2.resize(center_crop, (res, res), interpolation=interpolation)
    return resized

from typing import Any, Callable, Dict, List, Optional, Union
@torch.no_grad()
def denoise_step(
    pipe, imgs, t_start, weight_dtype,
    prompt: Union[str, List[str]] = None,
    height: Optional[int] = None,
    width: Optional[int] = None,
    num_inference_steps: int = 50,
    guidance_scale: float = 7.5,
    negative_prompt: Optional[Union[str, List[str]]] = None,
    num_images_per_prompt: Optional[int] = 1,
    eta: float = 0.0,
    generator: Optional[Union[torch.Generator, List[torch.Generator]]] = None,
    latents: Optional[torch.FloatTensor] = None,
    prompt_embeds: Optional[torch.FloatTensor] = None,
    negative_prompt_embeds: Optional[torch.FloatTensor] = None,
    output_type: Optional[str] = "pil",
    return_dict: bool = True,
    callback: Optional[Callable[[int, int, torch.FloatTensor], None]] = None,
    callback_steps: int = 1,
    cross_attention_kwargs: Optional[Dict[str, Any]] = None,
):
    r"""
    Function invoked when calling the pipeline for generation.

    Args:
        prompt (`str` or `List[str]`, *optional*):
            The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.
            instead.
        height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
            The height in pixels of the generated image.
        width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
            The width in pixels of the generated image.
        num_inference_steps (`int`, *optional*, defaults to 50):
            The number of denoising steps. More denoising steps usually lead to a higher quality image at the
            expense of slower inference.
        guidance_scale (`float`, *optional*, defaults to 7.5):
            Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
            `guidance_scale` is defined as `w` of equation 2. of [Imagen
            Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
            1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,
            usually at the expense of lower image quality.
        negative_prompt (`str` or `List[str]`, *optional*):
            The prompt or prompts not to guide the image generation. If not defined, one has to pass
            `negative_prompt_embeds`. instead. If not defined, one has to pass `negative_prompt_embeds`. instead.
            Ignored when not using guidance (i.e., ignored if `guidance_scale` is less than `1`).
        num_images_per_prompt (`int`, *optional*, defaults to 1):
            The number of images to generate per prompt.
        eta (`float`, *optional*, defaults to 0.0):
            Corresponds to parameter eta (Î·) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to
            [`schedulers.DDIMScheduler`], will be ignored for others.
        generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
            One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)
            to make generation deterministic.
        latents (`torch.FloatTensor`, *optional*):
            Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
            generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
            tensor will ge generated by sampling using the supplied random `generator`.
        prompt_embeds (`torch.FloatTensor`, *optional*):
            Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not
            provided, text embeddings will be generated from `prompt` input argument.
        negative_prompt_embeds (`torch.FloatTensor`, *optional*):
            Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt
            weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input
            argument.
        output_type (`str`, *optional*, defaults to `"pil"`):
            The output format of the generate image. Choose between
            [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
        return_dict (`bool`, *optional*, defaults to `True`):
            Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a
            plain tuple.
        callback (`Callable`, *optional*):
            A function that will be called every `callback_steps` steps during inference. The function will be
            called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.
        callback_steps (`int`, *optional*, defaults to 1):
            The frequency at which the `callback` function will be called. If not specified, the callback will be
            called at every step.
        cross_attention_kwargs (`dict`, *optional*):
            A kwargs dictionary that if specified is passed along to the `AttnProcessor` as defined under
            `self.processor` in
            [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/cross_attention.py).

    Examples:

    Returns:
        [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:
        [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.
        When returning a tuple, the first element is a list with the generated images, and the second element is a
        list of `bool`s denoting whether the corresponding generated image likely represents "not-safe-for-work"
        (nsfw) content, according to the `safety_checker`.
    """
    # 0. Default height and width to unet
    height = height or pipe.unet.config.sample_size * pipe.vae_scale_factor
    width = width or pipe.unet.config.sample_size * pipe.vae_scale_factor

    # 1. Check inputs. Raise error if not correct
    pipe.check_inputs(
        prompt, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds
    )

    # 2. Define call parameters
    if prompt is not None and isinstance(prompt, str):
        batch_size = 1
    elif prompt is not None and isinstance(prompt, list):
        batch_size = len(prompt)
    else:
        batch_size = prompt_embeds.shape[0]

    device = pipe._execution_device
    # here `guidance_scale` is defined analog to the guidance weight `w` of equation (2)
    # of the Imagen paper: https://arxiv.org/pdf/2205.11487.pdf . `guidance_scale = 1`
    # corresponds to doing no classifier free guidance.
    do_classifier_free_guidance = guidance_scale > 1.0

    # 3. Encode input prompt
    prompt_embeds = pipe._encode_prompt(
        prompt,
        device,
        num_images_per_prompt,
        do_classifier_free_guidance,
        negative_prompt,
        prompt_embeds=prompt_embeds,
        negative_prompt_embeds=negative_prompt_embeds,
    )

    # 5. Prepare latent variables
    noise_scheduler = DDPMScheduler.from_pretrained(args.pretrained_model_name_or_path, subfolder="scheduler")
    latents = pipe.vae.encode(imgs.to(dtype=weight_dtype, device=pipe.device)).latent_dist.sample()
    latents = latents * pipe.vae.config.scaling_factor
    noise = torch.randn_like(latents)
    bsz = latents.shape[0]
    noise_timestep = t_start * (noise_scheduler.config.num_train_timesteps // num_inference_steps)
    noise_timestep = 999 if noise_timestep == 1000 else noise_timestep
    noise_timesteps = torch.tensor([noise_timestep]*bsz, device=latents.device, dtype=torch.long)
    latents = noise_scheduler.add_noise(latents, noise, noise_timesteps)

    # 4. Prepare timesteps
    pipe.scheduler.set_timesteps(num_inference_steps, device=device)
    timesteps = pipe.scheduler.timesteps[-t_start:]

    # 6. Prepare extra step kwargs. TODO: Logic should ideally just be moved out of the pipeline
    extra_step_kwargs = pipe.prepare_extra_step_kwargs(generator, eta)

    # 7. Denoising loop
    num_warmup_steps = len(timesteps) - num_inference_steps * pipe.scheduler.order
    with pipe.progress_bar(total=t_start) as progress_bar:
        for i, t in enumerate(timesteps):
            # expand the latents if we are doing classifier free guidance
            latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents
            latent_model_input = pipe.scheduler.scale_model_input(latent_model_input, t)

            # predict the noise residual
            noise_pred = pipe.unet(
                latent_model_input,
                t,
                encoder_hidden_states=prompt_embeds,
                cross_attention_kwargs=cross_attention_kwargs,
            ).sample

            # perform guidance
            if do_classifier_free_guidance:
                noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
                noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)

            # compute the previous noisy sample x_t -> x_t-1
            latents = pipe.scheduler.step(noise_pred, t, latents, **extra_step_kwargs).prev_sample

            # call the callback, if provided
            if i == len(timesteps) - 1 or ((i + 1) > num_warmup_steps and (i + 1) % pipe.scheduler.order == 0):
                progress_bar.update()
                if callback is not None and i % callback_steps == 0:
                    callback(i, t, latents)

    if output_type == "latent":
        image = latents

    elif output_type == "pil":
        # 8. Post-processing
        image = pipe.decode_latents(latents)

        # 10. Convert to PIL
        image = pipe.numpy_to_pil(image)
    else:
        # 8. Post-processing
        image = pipe.decode_latents(latents)

    return image

def denoise(args, img_path, img_name, run, checkpoint, prompt_add, t_start):

    # set seed
    seed = args.seed
    set_seed(seed)

    # load arguments
    model_id = args.output_dir
    prompt = args.instance_prompt

    # fixed arguments
    weight_dtype = torch.float16
    num_images_per_prompt = 10
    num_inference_steps = 50
    guidance_scale = 7.5

    # load image into tensor and range (-1, 1)
    img = iio.imread(img_path)[..., :3]
    img = center_crop_and_resize(img, args.resolution)
    img = Image.fromarray(img)
    img = TF.to_tensor(img)
    img.unsqueeze_(0)
    imgs = torch.cat([img]*num_images_per_prompt, dim=0)
    imgs = (imgs*2)-1

    # skip if already generated
    output_dir = os.path.join(args.output_dir, f'denoise/{img_name}/{checkpoint}/{run}')
    if os.path.exists(output_dir):
        print(checkpoint, run, 'skipped')
        return

    # make output folder
    os.makedirs(output_dir)

    # load run-specific model and prompt
    checkpoint = "" if checkpoint == 'checkpoint-last' else checkpoint
    model_id += f'/{checkpoint}'
    prompt += f', {prompt_add}'

    # save arguments to text file
    with open(os.path.join(output_dir, 'args.txt'), 'w') as f:
        f.write(f'prompt = {prompt}\n')
        f.write(f'model_id = {model_id}\n')
        f.write(f"weight_dtype = {'float16' if weight_dtype == torch.float16 else 'float32'}\n")
        f.write(f'num_images_per_prompt = {num_images_per_prompt}\n')
        f.write(f'num_inference_steps = {num_inference_steps}\n')
        f.write(f't_start = {t_start}\n')
        f.write(f'guidance_scale = {guidance_scale}\n')
        f.write(f'img_path = {img_path}\n')

    # load model
    pipe = DiffusionPipeline.from_pretrained(args.pretrained_model_name_or_path, \
                                            torch_dtype=weight_dtype)
    pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
    pipe.to("cuda")
    pipe.unet.load_attn_procs(model_id)

    # generate images
    images = denoise_step(pipe, imgs, t_start, weight_dtype, prompt, num_inference_steps=num_inference_steps, \
                num_images_per_prompt=num_images_per_prompt)
    for i, image in enumerate(images):
        image.save(os.path.join(output_dir, '%03d.png' % i))


# load args from config
args = config_parser()

# execute different runs
with open(os.path.join(args.output_dir, 'denoise.txt'), 'r') as f:
    lines = f.readlines()

for i, line in enumerate(lines):
    if line.startswith('#'):
        run = line[2:].strip()
        checkpoint = lines[i+1].strip()
        prompt_add = lines[i+2].strip()
        img_path = lines[i+3].strip()
        img_name = lines[i+4].strip()
        t_start = int(lines[i+5].strip())
        denoise(args, img_path, img_name, run, checkpoint, prompt_add, t_start)